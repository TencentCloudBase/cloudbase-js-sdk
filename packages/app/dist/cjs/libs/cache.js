"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalCache = exports.getCacheByEnvId = exports.initCache = void 0;
var utilities_1 = require("@cloudbase/utilities");
var USER_INFO_KEY = 'user_info';
var CloudbaseCache = utilities_1.cache.CloudbaseCache;
var cacheMap = {};
var localCacheMap = {};
function initCache(config) {
    var env = config.env, platformInfo = config.platformInfo;
    var userInfoKey = USER_INFO_KEY + "_" + env;
    var keys = {
        userInfoKey: userInfoKey,
    };
    cacheMap[env] = cacheMap[env] || (new CloudbaseCache(__assign(__assign({}, config), { keys: keys,
        platformInfo: platformInfo })));
    localCacheMap[env] = localCacheMap[env] || new CloudbaseCache(__assign(__assign({}, config), { keys: keys,
        platformInfo: platformInfo, persistence: 'local' }));
}
exports.initCache = initCache;
function getCacheByEnvId(env) {
    return cacheMap[env];
}
exports.getCacheByEnvId = getCacheByEnvId;
function getLocalCache(env) {
    return localCacheMap[env];
}
exports.getLocalCache = getLocalCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGlicy9jYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUNBLGtEQUE2QztBQUc3QyxJQUFNLGFBQWEsR0FBRyxXQUFXLENBQUM7QUFRMUIsSUFBQSxjQUFjLEdBQUssaUJBQUssZUFBVixDQUFXO0FBRWpDLElBQU0sUUFBUSxHQUF3QixFQUFFLENBQUM7QUFFekMsSUFBTSxhQUFhLEdBQXdCLEVBQUUsQ0FBQztBQUU5QyxTQUFnQixTQUFTLENBQUMsTUFBc0M7SUFDdEQsSUFBQSxHQUFHLEdBQW1CLE1BQU0sSUFBekIsRUFBRSxZQUFZLEdBQUssTUFBTSxhQUFYLENBQVk7SUFPckMsSUFBTSxXQUFXLEdBQU0sYUFBYSxTQUFJLEdBQUssQ0FBQztJQUc5QyxJQUFNLElBQUksR0FBRztRQUNYLFdBQVcsYUFBQTtLQU9aLENBQUM7SUFFRixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxjQUFjLHVCQUMvQyxNQUFNLEtBQ1QsSUFBSSxNQUFBO1FBQ0osWUFBWSxjQUFBLElBQ1osQ0FBQyxDQUFDO0lBQ0osYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLGNBQWMsdUJBQ3hELE1BQU0sS0FDVCxJQUFJLE1BQUE7UUFDSixZQUFZLGNBQUEsRUFDWixXQUFXLEVBQUUsT0FBTyxJQUNwQixDQUFDO0FBQ0wsQ0FBQztBQWhDRCw4QkFnQ0M7QUFFRCxTQUFnQixlQUFlLENBQUMsR0FBVztJQUN6QyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QixDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQixhQUFhLENBQUMsR0FBVztJQUN2QyxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRkQsc0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLViB9IGZyb20gXCJAY2xvdWRiYXNlL3R5cGVzXCI7XG5pbXBvcnQgeyBjYWNoZSB9IGZyb20gXCJAY2xvdWRiYXNlL3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgSUNsb3VkYmFzZUNhY2hlLCBJQ2FjaGVDb25maWcgfSBmcm9tIFwiQGNsb3VkYmFzZS90eXBlcy9jYWNoZVwiO1xuXG5jb25zdCBVU0VSX0lORk9fS0VZID0gJ3VzZXJfaW5mbyc7XG4vLyBjb25zdCBLRVlfQUNDRVNTX1RPS0VOID0gJ2FjY2Vzc190b2tlbic7XG4vLyBjb25zdCBLRVlfQUNDRVNTX1RPS0VOX0VYUElSRSA9ICdhY2Nlc3NfdG9rZW5fZXhwaXJlJztcbi8vIGNvbnN0IEtFWV9SRUZSRVNIX1RPS0VOID0gJ3JlZnJlc2hfdG9rZW4nO1xuLy8gY29uc3QgS0VZX0FOT05ZTU9VU19VVUlEID0gJ2Fub255bW91c191dWlkJztcbi8vIGNvbnN0IEtFWV9MT0dJTl9UWVBFID0gJ2xvZ2luX3R5cGUnO1xuLy8gY29uc3QgREVWSUNFX0lORk8gPSAnZGV2aWNlX2lkJztcblxuY29uc3QgeyBDbG91ZGJhc2VDYWNoZSB9ID0gY2FjaGU7XG5cbmNvbnN0IGNhY2hlTWFwOiBLVjxJQ2xvdWRiYXNlQ2FjaGU+ID0ge307XG4vLyDmnKzlnLDlrZjlgqhcbmNvbnN0IGxvY2FsQ2FjaGVNYXA6IEtWPElDbG91ZGJhc2VDYWNoZT4gPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDYWNoZShjb25maWc6IElDYWNoZUNvbmZpZyAmIHsgZW52OiBzdHJpbmcgfSkge1xuICBjb25zdCB7IGVudiwgcGxhdGZvcm1JbmZvIH0gPSBjb25maWc7XG5cbiAgLy8gY29uc3QgYWNjZXNzVG9rZW5LZXkgPSBgJHtLRVlfQUNDRVNTX1RPS0VOfV8ke2Vudn1gO1xuICAvLyBjb25zdCBhY2Nlc3NUb2tlbkV4cGlyZUtleSA9IGAke0tFWV9BQ0NFU1NfVE9LRU5fRVhQSVJFfV8ke2Vudn1gO1xuICAvLyBjb25zdCByZWZyZXNoVG9rZW5LZXkgICAgICA9IGAke0tFWV9SRUZSRVNIX1RPS0VOfV8ke2Vudn1gO1xuICAvLyBjb25zdCBhbm9ueW1vdXNVdWlkS2V5ICAgICA9IGAke0tFWV9BTk9OWU1PVVNfVVVJRH1fJHtlbnZ9YDtcbiAgLy8gY29uc3QgbG9naW5UeXBlS2V5ICAgICAgICAgPSBgJHtLRVlfTE9HSU5fVFlQRX1fJHtlbnZ9YDtcbiAgY29uc3QgdXNlckluZm9LZXkgPSBgJHtVU0VSX0lORk9fS0VZfV8ke2Vudn1gO1xuICAvLyBjb25zdCBkZXZpY2VJZEtleSA9IGAke0RFVklDRV9JTkZPfWA7IC8vIOmdnueOr+Wig+e6p+WIq1xuXG4gIGNvbnN0IGtleXMgPSB7XG4gICAgdXNlckluZm9LZXksXG4gICAgLy8gYWNjZXNzVG9rZW5LZXksXG4gICAgLy8gYWNjZXNzVG9rZW5FeHBpcmVLZXksXG4gICAgLy8gcmVmcmVzaFRva2VuS2V5LFxuICAgIC8vIGFub255bW91c1V1aWRLZXksXG4gICAgLy8gbG9naW5UeXBlS2V5LFxuICAgIC8vIGRldmljZUlkS2V5XG4gIH07XG4gIC8vIOiLpeaMh+WummVuduW3suWtmOWcqGNhY2hl5YiZ5bCd6K+V5pu05pawcGVyc2lzdGVuY2VcbiAgY2FjaGVNYXBbZW52XSA9IGNhY2hlTWFwW2Vudl0gfHwgKG5ldyBDbG91ZGJhc2VDYWNoZSh7XG4gICAgLi4uY29uZmlnLFxuICAgIGtleXMsXG4gICAgcGxhdGZvcm1JbmZvLFxuICB9KSk7XG4gIGxvY2FsQ2FjaGVNYXBbZW52XSA9IGxvY2FsQ2FjaGVNYXBbZW52XSB8fCBuZXcgQ2xvdWRiYXNlQ2FjaGUoe1xuICAgIC4uLmNvbmZpZyxcbiAgICBrZXlzLFxuICAgIHBsYXRmb3JtSW5mbyxcbiAgICBwZXJzaXN0ZW5jZTogJ2xvY2FsJ1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlQnlFbnZJZChlbnY6IHN0cmluZyk6IElDbG91ZGJhc2VDYWNoZSB7XG4gIHJldHVybiBjYWNoZU1hcFtlbnZdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYWxDYWNoZShlbnY6IHN0cmluZyk6IElDbG91ZGJhc2VDYWNoZSB7XG4gIHJldHVybiBsb2NhbENhY2hlTWFwW2Vudl07XG59XG4iXX0=