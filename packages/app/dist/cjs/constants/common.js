"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAUTH2_LOGINTYPE_PREFIX = exports.LOGINTYPE = exports.getBaseEndPoint = exports.getEndPoint = exports.setRegionLevelEndpoint = exports.setEndPoint = exports.DATA_VERSION = exports.getSdkName = exports.setSdkName = exports.getSdkVersion = exports.setSdkVersion = void 0;
var utilities_1 = require("@cloudbase/utilities");
var setUtilitiesSdkName = utilities_1.constants.setSdkName, setUtilitiesProtocol = utilities_1.constants.setProtocol;
var sdk_version = '';
var sdk_name = '@cloudbase/js-sdk';
function setSdkVersion(version) {
    sdk_version = version;
}
exports.setSdkVersion = setSdkVersion;
function getSdkVersion() {
    return sdk_version;
}
exports.getSdkVersion = getSdkVersion;
function setSdkName(name) {
    sdk_name = name;
    setUtilitiesSdkName(name);
}
exports.setSdkName = setSdkName;
function getSdkName() {
    return sdk_name;
}
exports.getSdkName = getSdkName;
exports.DATA_VERSION = '2020-01-10';
var PROTOCOL = 'https:';
var BASE_URL = typeof process !== 'undefined' && process.env.NODE_ENV === 'e2e' && process.env.END_POINT === 'pre'
    ? '//tcb-pre.tencentcloudapi.com/web'
    : '//tcb-api.tencentcloudapi.com/web';
function setEndPoint(url, protocol) {
    BASE_URL = url;
    if (protocol) {
        PROTOCOL = protocol;
        setUtilitiesProtocol(protocol);
    }
}
exports.setEndPoint = setEndPoint;
function setRegionLevelEndpoint(env, region, protocol) {
    var endpoiont = region
        ? "//" + env + "." + region + ".tcb-api.tencentcloudapi.com/web"
        : "//" + env + ".ap-shanghai.tcb-api.tencentcloudapi.com/web";
    setEndPoint(endpoiont, protocol);
}
exports.setRegionLevelEndpoint = setRegionLevelEndpoint;
function getEndPoint() {
    return { BASE_URL: BASE_URL, PROTOCOL: PROTOCOL };
}
exports.getEndPoint = getEndPoint;
function getBaseEndPoint() {
    var _a = getEndPoint(), PROTOCOL = _a.PROTOCOL, BASE_URL = _a.BASE_URL;
    var webEndpoint = "" + PROTOCOL + BASE_URL;
    return "" + new URL(webEndpoint).origin;
}
exports.getBaseEndPoint = getBaseEndPoint;
var LOGINTYPE;
(function (LOGINTYPE) {
    LOGINTYPE["NULL"] = "NULL";
    LOGINTYPE["ANONYMOUS"] = "ANONYMOUS";
    LOGINTYPE["WECHAT"] = "WECHAT";
    LOGINTYPE["WECHAT_PUBLIC"] = "WECHAT-PUBLIC";
    LOGINTYPE["WECHAT_OPEN"] = "WECHAT-OPEN";
    LOGINTYPE["CUSTOM"] = "CUSTOM";
    LOGINTYPE["EMAIL"] = "EMAIL";
    LOGINTYPE["USERNAME"] = "USERNAME";
    LOGINTYPE["PHONE"] = "PHONE";
})(LOGINTYPE = exports.LOGINTYPE || (exports.LOGINTYPE = {}));
exports.OAUTH2_LOGINTYPE_PREFIX = 'OAUTH2';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnN0YW50cy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBQWlEO0FBR3pDLElBQVksbUJBQW1CLEdBQXdDLHFCQUFTLFdBQWpELEVBQWUsb0JBQW9CLEdBQUsscUJBQVMsWUFBZCxDQUFlO0FBSXpGLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUNyQixJQUFJLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQztBQUVuQyxTQUFnQixhQUFhLENBQUMsT0FBZTtJQUMzQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ3hCLENBQUM7QUFGRCxzQ0FFQztBQUNELFNBQWdCLGFBQWE7SUFDM0IsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUZELHNDQUVDO0FBQ0QsU0FBZ0IsVUFBVSxDQUFDLElBQVk7SUFDckMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUNoQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBSEQsZ0NBR0M7QUFDRCxTQUFnQixVQUFVO0lBQ3hCLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFGRCxnQ0FFQztBQUNZLFFBQUEsWUFBWSxHQUFHLFlBQVksQ0FBQztBQVF6QyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUE7QUFFdkIsSUFBSSxRQUFRLEdBQUcsT0FBTyxPQUFPLEtBQUssV0FBVyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLEtBQUssSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxLQUFLO0lBQ2hILENBQUMsQ0FBQyxtQ0FBbUM7SUFDckMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO0FBQ3hDLFNBQWdCLFdBQVcsQ0FBQyxHQUFXLEVBQUUsUUFBMkI7SUFDbEUsUUFBUSxHQUFHLEdBQUcsQ0FBQztJQUNmLElBQUksUUFBUSxFQUFFO1FBQ1osUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNwQixvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNoQztBQUNILENBQUM7QUFORCxrQ0FNQztBQUNELFNBQWdCLHNCQUFzQixDQUFDLEdBQVcsRUFBRSxNQUFjLEVBQUUsUUFBMkI7SUFDN0YsSUFBTSxTQUFTLEdBQUcsTUFBTTtRQUN0QixDQUFDLENBQUMsT0FBSyxHQUFHLFNBQUksTUFBTSxxQ0FBa0M7UUFDdEQsQ0FBQyxDQUFDLE9BQUssR0FBRyxpREFBOEMsQ0FBQTtJQUMxRCxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQ2xDLENBQUM7QUFMRCx3REFLQztBQUNELFNBQWdCLFdBQVc7SUFDekIsT0FBTyxFQUFFLFFBQVEsVUFBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUM7QUFDaEMsQ0FBQztBQUZELGtDQUVDO0FBR0QsU0FBZ0IsZUFBZTtJQUN2QixJQUFBLEtBQXlCLFdBQVcsRUFBRSxFQUFwQyxRQUFRLGNBQUEsRUFBRSxRQUFRLGNBQWtCLENBQUE7SUFDNUMsSUFBTSxXQUFXLEdBQUcsS0FBRyxRQUFRLEdBQUcsUUFBVSxDQUFBO0lBQzVDLE9BQU8sS0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFRLENBQUE7QUFDekMsQ0FBQztBQUpELDBDQUlDO0FBRUQsSUFBWSxTQVVYO0FBVkQsV0FBWSxTQUFTO0lBQ25CLDBCQUFhLENBQUE7SUFDYixvQ0FBdUIsQ0FBQTtJQUN2Qiw4QkFBaUIsQ0FBQTtJQUNqQiw0Q0FBK0IsQ0FBQTtJQUMvQix3Q0FBMkIsQ0FBQTtJQUMzQiw4QkFBaUIsQ0FBQTtJQUNqQiw0QkFBZSxDQUFBO0lBQ2Ysa0NBQXFCLENBQUE7SUFDckIsNEJBQWUsQ0FBQTtBQUNqQixDQUFDLEVBVlcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFVcEI7QUFFWSxRQUFBLHVCQUF1QixHQUFHLFFBQVEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJ0BjbG91ZGJhc2UvdXRpbGl0aWVzJztcblxuLy8gQHRzLWlnbm9yZVxuY29uc3QgeyBzZXRTZGtOYW1lOiBzZXRVdGlsaXRpZXNTZGtOYW1lLCBzZXRQcm90b2NvbDogc2V0VXRpbGl0aWVzUHJvdG9jb2wgfSA9IGNvbnN0YW50cztcbi8qKlxuICogU0RLXG4gKi9cbmxldCBzZGtfdmVyc2lvbiA9ICcnO1xubGV0IHNka19uYW1lID0gJ0BjbG91ZGJhc2UvanMtc2RrJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNka1ZlcnNpb24odmVyc2lvbjogc3RyaW5nKSB7XG4gIHNka192ZXJzaW9uID0gdmVyc2lvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZGtWZXJzaW9uKCkge1xuICByZXR1cm4gc2RrX3ZlcnNpb247XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0U2RrTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgc2RrX25hbWUgPSBuYW1lO1xuICBzZXRVdGlsaXRpZXNTZGtOYW1lKG5hbWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNka05hbWUoKSB7XG4gIHJldHVybiBzZGtfbmFtZTtcbn1cbmV4cG9ydCBjb25zdCBEQVRBX1ZFUlNJT04gPSAnMjAyMC0wMS0xMCc7XG4vKipcbiAqIHJlcXVlc3RcbiAqL1xuLy8gbGV0IFBST1RPQ09MID0gdHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHA6J1xuLy8gICA/ICdodHRwOidcbi8vICAgOiAnaHR0cHM6JztcblxubGV0IFBST1RPQ09MID0gJ2h0dHBzOidcblxubGV0IEJBU0VfVVJMID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZTJlJyAmJiBwcm9jZXNzLmVudi5FTkRfUE9JTlQgPT09ICdwcmUnXG4gID8gJy8vdGNiLXByZS50ZW5jZW50Y2xvdWRhcGkuY29tL3dlYidcbiAgOiAnLy90Y2ItYXBpLnRlbmNlbnRjbG91ZGFwaS5jb20vd2ViJztcbmV4cG9ydCBmdW5jdGlvbiBzZXRFbmRQb2ludCh1cmw6IHN0cmluZywgcHJvdG9jb2w/OiAnaHR0cCcgfCAnaHR0cHMnKSB7XG4gIEJBU0VfVVJMID0gdXJsO1xuICBpZiAocHJvdG9jb2wpIHtcbiAgICBQUk9UT0NPTCA9IHByb3RvY29sO1xuICAgIHNldFV0aWxpdGllc1Byb3RvY29sKHByb3RvY29sKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNldFJlZ2lvbkxldmVsRW5kcG9pbnQoZW52OiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nLCBwcm90b2NvbD86ICdodHRwJyB8ICdodHRwcycpIHtcbiAgY29uc3QgZW5kcG9pb250ID0gcmVnaW9uXG4gICAgPyBgLy8ke2Vudn0uJHtyZWdpb259LnRjYi1hcGkudGVuY2VudGNsb3VkYXBpLmNvbS93ZWJgXG4gICAgOiBgLy8ke2Vudn0uYXAtc2hhbmdoYWkudGNiLWFwaS50ZW5jZW50Y2xvdWRhcGkuY29tL3dlYmBcbiAgc2V0RW5kUG9pbnQoZW5kcG9pb250LCBwcm90b2NvbClcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmRQb2ludCgpIHtcbiAgcmV0dXJuIHsgQkFTRV9VUkwsIFBST1RPQ09MIH07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJhc2VFbmRQb2ludCgpIHtcbiAgY29uc3QgeyBQUk9UT0NPTCwgQkFTRV9VUkwgfSA9IGdldEVuZFBvaW50KClcbiAgY29uc3Qgd2ViRW5kcG9pbnQgPSBgJHtQUk9UT0NPTH0ke0JBU0VfVVJMfWBcbiAgcmV0dXJuIGAke25ldyBVUkwod2ViRW5kcG9pbnQpLm9yaWdpbn1gXG59XG5cbmV4cG9ydCBlbnVtIExPR0lOVFlQRSB7XG4gIE5VTEwgPSAnTlVMTCcsXG4gIEFOT05ZTU9VUyA9ICdBTk9OWU1PVVMnLFxuICBXRUNIQVQgPSAnV0VDSEFUJyxcbiAgV0VDSEFUX1BVQkxJQyA9ICdXRUNIQVQtUFVCTElDJyxcbiAgV0VDSEFUX09QRU4gPSAnV0VDSEFULU9QRU4nLFxuICBDVVNUT00gPSAnQ1VTVE9NJyxcbiAgRU1BSUwgPSAnRU1BSUwnLFxuICBVU0VSTkFNRSA9ICdVU0VSTkFNRScsXG4gIFBIT05FID0gJ1BIT05FJ1xufVxuXG5leHBvcnQgY29uc3QgT0FVVEgyX0xPR0lOVFlQRV9QUkVGSVggPSAnT0FVVEgyJ1xuIl19