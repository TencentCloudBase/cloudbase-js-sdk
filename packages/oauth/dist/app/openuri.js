"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOpenURIWithCallback = void 0;
exports.defaultOpenURIWithCallback = function (url, opts) {
    var iframeTag = '__iframe';
    if (window.location.search.indexOf(iframeTag) > 0) {
        document.body.style.display = 'none';
    }
    if (!opts) {
        opts = {
            width: '355px',
            height: '355px'
        };
    }
    if (document.getElementById('_iframe_panel_wrap') === null) {
        var elementDiv = document.createElement('div');
        elementDiv.style.cssText =
            'background-color: rgba(0, 0, 0, 0.7);position: fixed;left: 0px;right: 0px;top: 0px;bottom: 0px;padding: 9vw 0 0 0;display: none;z-index:100;';
        elementDiv.setAttribute('id', '_iframe_panel_wrap');
        document.body.appendChild(elementDiv);
    }
    var target = document.getElementById('_iframe_panel_wrap'), iframe = document.createElement('iframe');
    target.innerHTML = '';
    var openURL = new URL(url);
    var redirectUri = openURL.searchParams.get('redirect_uri');
    if (redirectUri) {
        var redirectUrl = new URL(redirectUri);
        redirectUrl.searchParams.append(iframeTag, "on");
        openURL.searchParams.set('redirect_uri', redirectUrl.href);
        url = openURL.href;
    }
    iframe.setAttribute('src', url);
    iframe.setAttribute('id', '_iframe_panel_wrap_iframe');
    iframe.style.cssText = "min-width:" + opts.width + ";display:block;height:" + opts.height + ";margin:0 auto;background-color: rgb(255, 255, 255);border: none;";
    target.appendChild(iframe);
    target.style.display = 'block';
    var callBack = new Callback();
    window.addEventListener('message', function (e) {
        if (e.origin == openURL.origin && callBack.callFunc) {
            target.style.display = 'none';
            var data = JSON.parse(e.data);
            try {
                callBack.callFunc(data);
            }
            catch (e) {
            }
        }
    }, false);
    return new Promise(function (resolve, reject) {
        callBack.callFunc = function (data) {
            if (data.error) {
                return reject(data);
            }
            return resolve(data);
        };
        iframe.onload = function () {
            try {
                var windowLocation = window.location;
                var iframeLocation = iframe.contentWindow.location;
                if (iframeLocation.host +
                    iframeLocation.pathname ===
                    windowLocation.host +
                        windowLocation.pathname) {
                    target.style.display = 'none';
                    var iframeUrlParams = new URLSearchParams(iframeLocation.search);
                    var data_1 = {};
                    iframeUrlParams.forEach(function (v, k) {
                        data_1[k] = v;
                    });
                    if (data_1.error) {
                        return reject({
                            error: iframeUrlParams.get('error'),
                            error_description: iframeUrlParams.get('error_description')
                        });
                    }
                    return resolve(data_1);
                }
                else {
                    target.style.display = 'block';
                }
            }
            catch (error) {
                target.style.display = 'block';
            }
        };
    });
};
var Callback = (function () {
    function Callback() {
    }
    return Callback;
}());
//# sourceMappingURL=data:application/json;base64,